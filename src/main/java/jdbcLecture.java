import com.mysql.jdbc.Driver;

import java.sql.*;

public class jdbcLecture {
    public static void main(String[] args) throws SQLException {
        Config config = new Config();


        // instantiate the MySQL driver to register to the built in java driver manager
        DriverManager.registerDriver(new Driver());


        // connect to the database by providing the URL, user, and the password of the user we want to connect as.
        Connection connection = DriverManager.getConnection(config.getUrl(), config.getUser(), config.getPassword());

        // create a statement object to execute queries.
        Statement stmt = connection.createStatement();

        // we can use the statement object to make our queries.

        // returns a boolean indicating success.
        // if it deletes true, if it doesnt delete false.
//        stmt.execute("DELETE FROM albums WHERE id = 4");


        //returns the number of rows affected
//        stmt.executeUpdate("INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)");



        // returns a resultset object
//        stmt.executeQuery("SELECT * FROM albums");

        // handling the results witht he ResultSet object

        String selectQuery = "SELECT * FROM albums";
        ResultSet rs = stmt.executeQuery(selectQuery);

        // by calling the .next() we can iterate over the rows.
        // the method will return as true as long as there are rows left in our results.
        // therefore, the most common way to handle the results is to use a while loop.

        while(rs.next()) {
            // do something with each row
            System.out.println("here's an album: ");
            System.out.println(" id:" + rs.getLong("id"));
            System.out.println(" artist: " + rs.getString("artist"));
            System.out.println(" name: " + rs.getString("name"));
        }

        // insert query
        String insertQuery = "INSERT INTO albums (artist, name, release_date, genre, sales) VALUES('Nelly Furtado', 'Loose', 2006, 'Dance-pop, hip hop, R&B', 12.5)";

        // for executeUpdate method, you can have two arguments:
        // first is the Query String we want to execute.
        // second is a constant from the Statement Object.
        // this gives us access to the ids that our automatically generated by the database.

        stmt.executeUpdate(insertQuery, Statement.RETURN_GENERATED_KEYS);

        // we can then use the getGeneratedKeys() method on the ResultSet object which will hold any IDs generated by the database.
        ResultSet rsKeys = stmt.getGeneratedKeys();

        if(rsKeys.next()) {
            System.out.println("inserted a new record! NEW ID: " + rsKeys.getLong(1));
        }

    }
}